Parameters:
  EnvironmentName:
    Description: Prefixed to resource names
    Type: String
  CIDR:
    Description: Access all IP
    Type: String
    Default: 0.0.0.0/0

Resources:
# Role to allow EC2 access to S3
  RoleForS3Access: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AccessS3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'

  ProfileWithRolesForOurApp:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles:
        - !Ref RoleForS3Access

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref CIDR
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref CIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref CIDR

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref CIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref CIDR
  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AppTargetGroup
      LoadBalancerArn:
        Ref: AppLB
      Port: '80'
      Protocol: HTTP

  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'AppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  AppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          sudo apt-get install awscli -y
          mkdir .aws
          cd .aws/
          echo "[default]" >> ~/.aws/credentials
          echo "aws_access_key_id = ASIAQMZ4LAQHHOOBZ5SG" >> ~/.aws/credentials
          echo "aws_secret_access_key = MruKNYNHsWFl5X7YXRZOzZKI6tAeqwtSazytXOCA" >> ~/.aws/credentials
          echo "aws_session_token = FwoGZXIvYXdzELX//////////wEaDLrbV7EteLNmLPD7viLVAQ2JRZdeIDTlx3+lDsWZTkh4Rw52Y7i8OHycy7rv5QriLkWBF+R6RowQ69kIrhTB+j9860ukIk/E7c3C/JA9uglihDQwLS7HyXSS1VRlUu+IrbMzVa4bGk/yM1UP4XJsHoBGwQtgtasrQ6HD49wvLzziluGWv4nv6EsaFvr4ILhs5GZ8dxOzs85ryhcO0qP1Uwi+qy9l+vuPa+s0ScS9n5/bHSgnit+7F8Gv6jYmA8r7sDT25hvLHtckQGA1WVlv6mtlVbzfxIe9PPuya87eGY2zE7eBGCiekp+SBjIttKjRzMTmUKBSiR+2q0FD2SymEtZgZRLi64cykMTbrkQzNqXtGxh/AD/NO2e/" >> ~/.aws/credentials
          echo "[default]" >> ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
          echo "output = json" >> ~/.aws/config
          sudo rm /var/www/html/index.html
          sudo aws s3 cp s3://c3finalproject/index.html /var/www/html
      # AMI ID of Ubuntu Linux machine 
      # echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: ami-0e472ba40eb589f49
      SecurityGroups:
      - Ref: ServerSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  AppAutoGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2"
      LaunchConfigurationName:
        Ref: AppLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
      - Ref: AppTargetGroup